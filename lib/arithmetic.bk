(static module arithmetic

  (pub const + add)

  (pub fun add [arguments...]
    (iterate_arithmetic
      0 arguments add_internal))

  (internal fun add_internal [first second])

  (pub const - subtract)

  (pub fun subtract [arguments...]
    (if (is_null arguments)
      0
      (subtract_list
        (pair::first arguments)
        (pair::second arguments))))

  (fun subtract_list [argument remaining]
    (if (is_null remaining)
      (subtract_internal 0 argument)
      (iterate_arithmetic
        argument remaining subtract_internal)))

  (internal fun subtract_internal [first second])

  (pub const * multiply)

  (pub fun multiply [arguments...]
    (iterate_arithmetic
      1 arguments multiply_internal))

  (internal fun multiply_internal [first second])

  (pub const / divide)

  (pub fun divide [arguments...]
    (if (is_null arguments)
      1
      (divide_list
        (pair::first arguments)
        (pair::second arguments))))

  (fun divide_list [argument remaining]
    (if (is_null remaining)
      (divide_internal 1 argument)
      (iterate_arithmetic
        argument remaining divide_internal)))

  (internal fun divide_internal [first second])

  (fun iterate_arithmetic [accumulator arguments operation]
    (if (is_null arguments)
      accumulator
      (iterate_arithmetic
        (operation
          accumulator
          (pair::first arguments))
        (pair::second arguments)
        operation)))

  (pub const % remainder)

  (pub fun remainder [first second]
    (remainder_internal first second))

  (internal fun remainder_internal [first second]))
