(module sort

  (public function sort [numbers...]
    (merge_sort numbers))

  (function merge_sort [numbers]
    (if (list::is_empty numbers)
      numbers
    (if (= (list::get_length numbers) 1)
      numbers
    (let splitted_list (split numbers)
    (merge
      (merge_sort (pair::first splitted_list))
      (merge_sort (pair::second splitted_list)))))))

  (function merge [first_list second_list]
    (if (list::is_empty first_list)
      second_list
    (if (list::is_empty second_list)
      first_list
    (let first_list_element (pair::first first_list)
    (let second_list_element (pair::first second_list)
      (if (< first_list_element second_list_element)
        (create_list first_list_element first_list second_list)
        (create_list second_list_element second_list first_list)))))))

  (function create_list [first_element first_element_list second_list]
    (pair::new
      first_element
      (merge (pair::second first_element_list)
             second_list)))

  (function split [origin_list]
    (let half_length (/ (list::get_length origin_list) 2)
      (split_iterate half_length null origin_list 0)))

  (function split_iterate [half_length head tail index]
    (if (< index half_length)
      (split_iterate
        half_length
        (pair::new
          (pair::first tail)
          head)
        (pair::second tail)
        (+ index 1))
      (pair::new head tail))))
